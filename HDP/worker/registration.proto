syntax = "proto3";

package HDP.worker.registration;

import "google/protobuf/timestamp.proto";
import "worker/common.proto";

enum WorkerType {
    HYDROPONIC = 0;
    IRRIGATION = 1;
    WEATHER = 2;
}

message Payload {

    string id = 1;
    WorkerType type = 2;
    HDP.worker.common.Inventory inventory = 3;

    // change termanology such as: waterWorker (responsible for dossing water) not used in irrigation
    //
    // user creates a system
    // workers self-register with controller
    // there may be workers from several different systems
    // each worker by default is unclaimed
    // the user can claim workers for a system
    //
    // each system can have a type (only changes things client & server side, not worker side)
    // once worker is registered and claimed, a config is sent to the worker
    // otherwise it will be stay in "waiting for config"
    // if new config is recieved, reset worker with new config
    // workers don't persist state, just their ID
    //
    // Workers register a service "HDP.worker" with an ID (header?) server keeps track of the pairing between session id's and worker id's
    // worker registers an endpoint "config" which accepts new configurations
}
